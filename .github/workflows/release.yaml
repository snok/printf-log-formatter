name: release

on:
  release:
    types:
      - created

  workflow_dispatch:
    inputs:
      version:
        description: 'Package version'
        required: true
        default: refs/tags/v0.1.0

jobs:

  # This builds Rust binaries which we upload to our GitHub release

  release:
    if: github.event_name == 'release'
    name: release - ${{ matrix.platform.release_for }}
    runs-on: ${{ matrix.platform.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        platform:
          - release_for: linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: printf-log-formatter
            name: printf-log-formatter-linux-x86_64-musl.tar.gz

          - release_for: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: printf-log-formatter.exe
            name: printf-log-formatter-windows-x86_64.zip

          - release_for: macos-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: printf-log-formatter
            name: printf-log-formatter-darwin-x86_64.tar.gz

          - release_for: macos-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: printf-log-formatter
            name: printf-log-formatter-darwin-aarch64.tar.gz

    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.platform.target }}

      - name: build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
      - name: package as archive
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          else
            tar czvf ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          fi
          cd -
      - name: publish github release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: "printf-log-formatter-*"
          body_path: Changes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: startsWith( github.ref, 'refs/tags/v' )

  # Steps below this line builds wheels for publishing to PyPI

  build-wheel-linux:
    name: build linux wheel for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, x86, aarch64, armv7, s390x, ppc64le]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - if: github.event_name == 'workflow_dispatch'
        run: python .github/set_version.py ${{ inputs.version }}
        name: set package version

      - if: github.event_name != 'workflow_dispatch'
        run: python .github/set_version.py
        name: set package version

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --zig
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  build-wheel-windows:
    name: build wheel for ${{ matrix.target }}
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - if: github.event_name == 'workflow_dispatch'
        run: python .github/set_version.py ${{ inputs.version }}
        name: set package version

      - if: github.event_name != 'workflow_dispatch'
        run: python .github/set_version.py
        name: set package version

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  build-wheel-macos:
    name: build wheel for ${{ matrix.target }}
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - if: github.event_name == 'workflow_dispatch'
        run: python .github/set_version.py ${{ inputs.version }}
        name: set package version

      - if: github.event_name != 'workflow_dispatch'
        run: python .github/set_version.py
        name: set package version

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  sdist:
    needs: [build-wheel-linux, build-wheel-macos, build-wheel-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release-to-pypi:
    if: github.event_name == 'release'
    name: release to PyPI
    runs-on: ubuntu-latest
    needs: [ build-wheel-linux, build-wheel-windows, build-wheel-macos, sdist ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
